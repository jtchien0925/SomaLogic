source("https://bioconductor.org/biocLite.R")
biocLite("graph")
source("http://bioconductor.org/biocLite.R")
?BiocUpgrade
biocLite("BiocUpgrade")
biocLite("graph")
version
biocLite("BioInstaller")
library(graph)
set.seed(123)
g1 = randomEGraph(LETTERS[1:15], edges=100)
g1
plot(g1)
biocLite("Rgraphviz")
plot(g1)
R CMD INSTALL ('http://github.com/spedygiorgio/markovchain/')
install.packages('http://github.com/spedygiorgio/markovchain/')
source("https://bioconductor.org/biocLite.R")
source("http://bioconductor.org/biocLite.R")
version
biocLite("birta")
# load the package
library(MASS)
data(iris)
# fit model
fit <- lda(Species~., data=iris)
# summarize the fit
summary(fit)
# make predictions
predictions <- predict(fit, iris[,1:4])$class
# summarize accuracy
table(predictions, iris$Species)
# fit model
version
setInternet2(TRUE)
install.packages("installr")
version
library(MASS)
library VGAM
library (VGAM)
install.packages(VGAM)
library (VGAM)
install.packages(stats4)
library (VGAM)
library(caret)
library(caret)
library(ggplot2)
install.packages("ggplot2")
install.packages("ggplot2")
library(caret)
remove.packages(c("ggplot2", "data.table"))
install.packages('Rcpp', dependencies = TRUE)
install.packages("Rcpp", dependencies = TRUE)
install.packages('ggplot2', dependencies = TRUE)
install.packages('data.table', dependencies = TRUE)
library(caret)
install.packages("forecast", repos=c("http://rstudio.org/_packages", "http://cran.rstudio.com"))
library(caret)
install.packages("package's name", repos=c("http://rstudio.org/_packages", "http://cran.rstudio.com"))
library(caret)
install.packages("FinancialInstrument", repos="http://R-Forge.R-project.org")
install.packages("quantstrat", repos="http://R-Forge.R-project.org")
library(caret)
# load library
library(VGAM)
# load data
data(iris)
# build model
model <- vglm(Species~., family=multinomial, data=iris)
install.packages("bbmle")
library(VGAM)
# load data
data(iris)
# build model
model <- vglm(Species~., family=multinomial, data=iris)
# simulation
probabilities <- predict(model, iris[,1:4], type="response")
sim <- apply(probabilities, 1, which.max)
sim[which(sim=="1")] <- levels(iris$Species)[1]
sim[which(sim=="2")] <- levels(iris$Species)[2]
sim[which(sim=="3")] <- levels(iris$Species)[3]
# summarize accuracy
table(sim, iris$Species)
install.packages("glm")
# load library
library(VGAM)
# load data
data(iris)
# build model
model <- vglm(Species~., family=binomial, data=iris)
library(VGAM)
# load data
data(iris)
# build model
model <- vglm(Species~., family=multinomial, data=iris)
warnings()
# simulation
probabilities <- predict(model, iris[,1:4], type="response")
sim <- apply(probabilities, 1, which.max)
sim[which(sim=="1")] <- levels(iris$Species)[1]
sim[which(sim=="2")] <- levels(iris$Species)[2]
sim[which(sim=="3")] <- levels(iris$Species)[3]
# summarize accuracy
table(sim, iris$Species)
suppressWarnings(warning("model"))
model <- vglm(Species~., family=multinomial, data=iris)
model = model warning("There were 20 warnings", call.=FALSE)
model
# load library
library(VGAM)
options(warn=-1)
# load data
data(iris)
# build model
model <- vglm(Species~., family=multinomial, data=iris)
# simulation
probabilities <- predict(model, iris[,1:4], type="response")
sim <- apply(probabilities, 1, which.max)
sim[which(sim=="1")] <- levels(iris$Species)[1]
sim[which(sim=="2")] <- levels(iris$Species)[2]
sim[which(sim=="3")] <- levels(iris$Species)[3]
# summarize accuracy
table(sim, iris$Species)
```
最後就是PLS。首先先執行以下指令：
```{r}
install.packages("FinancialInstrument", repos="http://R-Forge.R-project.org")
install.packages("quantstrat", repos="http://R-Forge.R-project.org")
# load library
library(caret)
data(iris)
x <- iris[,1:4]
y <- iris[,5]
# fit model
fit <- plsda(x, y, probMethod="Bayes")
# make predictions
predictions <- predict(fit, iris[,1:4])
install.packages("pls")
# load library
library(caret)
data(iris)
x <- iris[,1:4]
y <- iris[,5]
# fit model
fit <- plsda(x, y, probMethod="Bayes")
# make predictions
predictions <- predict(fit, iris[,1:4])
install.packages("klaR")
library(caret)
data(iris)
x <- iris[,1:4]
y <- iris[,5]
# fit model
fit <- plsda(x, y, probMethod="Bayes")
# make predictions
predictions <- predict(fit, iris[,1:4])
# summarize accuracy
table(predictions, iris$Species)
```
# load the package
library(MASS)
data(iris)
# fit model
fit <- qda(Species~., data=iris)
# summarize the fit
summary(fit)
# make predictions
predictions <- predict(fit, iris[,1:4])$class
# summarize accuracy
table(predictions, iris$Species)
# load the package
library(klaR)
data(iris)
# fit model
fit <- rda(Species~., data=iris, gamma=0.05, lambda=0.01)
# summarize the fit
summary(fit)
# make predictions
predictions <- predict(fit, iris[,1:4])$class
# summarize accuracy
table(predictions, iris$Species)
# load the package
library(caret)
data(iris)
# fit model
fit <- knn3(Species~., data=iris, k=5)
install.packages("lattice")
install.packages("lattice")
install.packages("ggplot2")
library(caret)
data(iris)
# fit model
fit <- knn3(Species~., data=iris, k=5)
# summarize the fit
summary(fit)
# make predictions
predictions <- predict(fit, iris[,1:4], type="class")
# summarize accuracy
table(predictions, iris$Species)
# load the package
library(e1071)
install.packages("e1071")
library(e1071)
data(iris)
# fit model
fit <- naiveBayes(Species~., data=iris)
# summarize the fit
summary(fit)
# make predictions
predictions <- predict(fit, iris[,1:4])
# summarize accuracy
table(predictions, iris$Species)
source("http://bioconductor.org/biocLite.R")
biocLite(c("AnnotationDbi", "impute", "GO.db", "preprocessCore"))
install.packages("WGCNA")
print "hello wrold"
print 'hello wrold'
source("http://www.bioconductor.org/getBioC.R")
data <- read.csv(file.choose(), header = T)
data <- read.csv(file.choose(), header = T)
data.1 <- data
data.2 <- data[ , 1:2]
View(data)
data <- read.csv(file.choose(), header = T)
data <- read.csv(file.choose(), header = T)
data.1 <- data
data.2 <- data[ , 1:2]
View(data)
data <- read.csv(file.choose(), header = T)
data <- read.csv(file.choose(), header = T)
library("DESeq2")
r
version
install.packages("installr")
install.packages("manipulate")
source("https://bioconductor.org/biocLite.R")
biocLite("org.Mmu.eg.db")
setwd("~/")
library("DESeq2")
#tuto2
directory<-"~/Desktop/Galinski lab /MaHPIC_RNAseq/E03/E03Tp1VSTp2test"
#combine all files wiht "m" intiate
sampleFiles<-grep("R",list.files(directory),value=TRUE)
#Given the batch
sampleBatch <- c("TP1","TP2","TP1","TP2","TP1","TP2","TP1","TP2","TP1","TP2"
)
#Given the condition, in our exp is by monkey
sampleCondition<-c("Baseline","TP2","Baseline","TP2","Baseline","TP2","Baseline","TP2","Baseline","TP2")
sampleTable<-data.frame(sampleName=sampleFiles, fileName=sampleFiles, condition=sampleCondition, Batch = sampleBatch)
#view sampleTable
#sampleTable
#tell DEseq that data is from HT-seq
ddsHTSeq<-DESeqDataSetFromHTSeqCount(sampleTable=sampleTable, directory=directory, design=~condition)
#check ddsHTseq
#ddsHTseq
colData(ddsHTSeq)$condition<-factor(colData(ddsHTSeq)$condition, levels=c("Baseline","TP2"))
#ddsHTseq
#tuto2
dds<-DESeq(ddsHTSeq)
res<-results(dds)
# order in p-value adjustment
res<-res[order(res$padj),]
head(res)
library("AnnotationDbi")
library("org.Mmu.eg.db")
columns(org.Mmu.eg.db)
res$symbol = mapIds(org.Mmu.eg.db,
keys=row.names(res),
column="SYMBOL",
keytype="ENSEMBL",
multiVals="first")
library(pathview)
install.packages("pathview")
biocLite("pathview")
library(pathview)
library(gage)
biolite("gage")
biocLite("gage")
biocLite("gageData")
library(gage)
library(gageData)
data(kegg.sets.Mmu)
data(kegg.sets.mcc)
data(korg)
head(korg[,1:3])
go.mcc=go.gsets(species="rhesus")
biocLite("GO.db")
library(GO.db)
foldchanges = res$log2FoldChange
names(foldchanges) = res$entrez
head(foldchanges)
keggres = gage(foldchanges, gsets=kegg.org, same.dir=TRUE)
keggres = gage(foldchanges, gsets=kegg.mcc, same.dir=TRUE)
data(bods)
keggres = gage(foldchanges, gsets=kegg.mcc, same.dir=TRUE)
keggres = gage(foldchanges, gsets=kegg.gs, same.dir=TRUE)
keggres = gage(foldchanges, gsets=kegg.gs.mcc, same.dir=TRUE)
columns(org.Mmu.eg.db)
kg.mcc=kegg.gsets("mcc")
kegg.gs=kg.mcc$kg.sets[kg.mcc$sigmet.idx]
keggres = gage(foldchanges, gsets=kegg.gs, same.dir=TRUE)
lapply(keggres, head)
keggrespathways = data.frame(id=rownames(keggres$greater), keggres$greater) %>%
tbl_df() %>%
filter(row_number()<=5) %>%
.$id %>%
as.character()
keggrespathways
keggrespathways = data.frame(id=rownames(keggres$greater), keggres$greater) %>%
tbl_df() %>%
filter(row_number()<=5) %>%
.$id %>%
as.character())
keggrespathways = data.frame(id=rownames(keggres$greater), keggres$greater) %>%
tbl_df() %>%
filter(row_number()<=5) %>%
.$id %>%
as.character()
keggrespathways = data.frame(id=rownames(keggres$greater), keggres$greater)
tbl_df()
tbl_df() %>%
filter(row_number()<=5) %>%
.$id %>% as.character()
lot_pathway = function(pid) pathview(gene.data=foldchanges, pathway.id=pid, species="mcc", new.signature=FALSE)
plot_pathway = function(pid) pathview(gene.data=foldchanges, pathway.id=pid, species="mcc", new.signature=FALSE)
tmp = sapply(keggresids, function(pid) pathview(gene.data=foldchanges, pathway.id=pid, species="mcc"))
keggresids = substr(keggrespathways, start=1, stop=8)
keggresids
tmp = sapply(keggresids, function(pid) pathview(gene.data=foldchanges, pathway.id=pid, species="mcc"))
setwd("~/Desktop/Solmatic")
install.packages("devtools")
devtools::install_bitbucket("graumannlabtools/readat")
install.packagees("dplyr")
install.packages("dplyr")
install.packages("dplyr")
devtools::install_bitbucket("graumannlabtools/readat")
install.package(c("digest","reshape"))
install.packages(c("digest","reshape"))
install.packages(c("digest", "reshape"))
install.packages("SomaDataIO.tar.gz", repos=NULL, type="source")
install.packages("SomaDataIO_1.5.0.tar.gz", repos=NULL, type="source")
install.packages("SomaDataIO_1.5.0.zip", repos=NULL, type="source")
install.packages("SomaDataIO_1.5.0.tar.gz", repos=NULL, type="source")
install.packages("SomaDataIO_1.5.0.zip", repos=NULL, type="source")
load("/Users/Bob/Desktop/Solmatic/SomaDataIO/data/sample.adats.rda")
load("/Users/Bob/Desktop/Solmatic/SomaDataIO/data/sample.adats.rda")
View(apt.data_example)
View(apt.data_example)
bioLite("readat")
biocLite("readat")
biocite("readat")
bioclite("readat")
source("https://bioconductor.org/bioLite.R")
source("https://bioconductor.org/bioLite.r")
source("https://bioconductor.org/biocLite.R")
biocLite("readat")
setwd("~/Desktop/Solmatic/EMO_16-197_20161025")
try<-readAdat("EMO-16-197.hybNorm.medNorm.20161025.adat")
library(readat)
try<-readAdat("EMO-16-197.hybNorm.medNorm.20161025.adat")
View(try)
View(try.SampleGroup)
newdata<-try[c(4,7,8,9,11,17)]
View(newdata)
seqData<-getSequenceData(newdata)
View(seqData)
library(reshape2)
meldata<-melt(newdata)
View(meldata)
library(magrittr)
library(dplyr)
frames
insterestingSeqs<- getSequencesWithLargestBetweenGroupVariation(meldata,n = 3)[,.(SeqID,Target)]
insterestingSeqs<- getSequencesWithLargestBetweenGroupVariation(meldata,n = 3)[,(SeqID,Target)]
insterestingSeqs<- getSequencesWithLargestBetweenGroupVariation(meldata,n = 3)[,(SeqID,Target)]
insterestingSeqs<- getSequencesWithLargestBetweenGroupVariation(meldata,n = 3)[,(SeqId,Target)]
(insterestingSeqs<- getSequencesWithLargestBetweenGroupVariation(meldata,n = 3)[,(SeqId,Target)])
(insterestingSeqs<- getSequencesWithLargestBetweenGroupVariation(meldata,n = 3)[,(SeqId,"Target")])
(insterestingSeqs<- getSequencesWithLargestBetweenGroupVariation(meldata,n = 3)[,(SeqId)])
insterestingSeqs<- getSequencesWithLargestBetweenGroupVariation(meldata,n = 3,SeqId)
insterestingSeqs<- getSequencesWithLargestBetweenGroupVariation(meldata,n = 3, group= ~SeqId)
View(seqData)
View(insterestingSeqs)
insterestingSeqs<- getSequencesWithLargestBetweenGroupVariation(meldata,n = 3, group= (~SeqId,Target))
insterestingSeqs<- getSequencesWithLargestBetweenGroupVariation(meldata,n = 3, group= ~SeqId,Target)
interestingData<- merge(meldata,insterestingSeqs) %>%
mutate_(SeqName= ~paste(SeqId, Target,sep =","))
View(interestingData)
library(ggplot2)
library(ggplot)
figure1<- interestingData %>%
ggplot(aes(SampleGroup, Intensity, color= TimePoint)) +
geom_point(size = 6) +
scale_y_log10() +
facet_wrap(~ SeqName) +
theme_bw() +
theme (legend.position = "top") +
labs (color = "Monkey" , x= "time")
figure1
figure1<- interestingData %>%
ggplot(aes(Subject_ID, Intensity, color= TimePoint)) +
geom_point(size = 6) +
scale_y_log10() +
facet_wrap(~ SeqName) +
theme_bw() +
theme (legend.position = "top") +
labs (color = "Monkey" , x= "")
figure1
MonkeyExpression<- soma2eset(newdata)
View(MonkeyExpression)
insterestingSeqs<- getSequencesWithLargestBetweenGroupVariation(meldata,n = 10, group= ~SeqId,Target)
interestingData<- merge(meldata,insterestingSeqs) %>%
mutate_(SeqName= ~paste(SeqId, Target,sep =","))
library(ggplot)
figure1<- interestingData %>%
ggplot(aes(Subject_ID, Intensity, color= TimePoint)) +
geom_point(size = 6) +
scale_y_log10() +
facet_wrap(~ SeqName) +
theme_bw() +
theme (legend.position = "top") +
labs (color = "Monkey" , x= "")
figure1
View(insterestingSeqs)
View(insterestingSeqs)
View(interestingData)
View(interestingData)
insterestingSeqs<- getSequencesWithLargestBetweenGroupVariation(meldata,n = 1, group= ~SeqId,Target)
interestingData<- merge(meldata,insterestingSeqs) %>%
mutate_(SeqName= ~paste(SeqId, Target,sep =","))
library(ggplot)
figure1<- interestingData %>%
ggplot(aes(Subject_ID, Intensity, color= TimePoint)) +
geom_point(size = 6) +
scale_y_log10() +
facet_wrap(~ SeqName) +
theme_bw() +
theme (legend.position = "top") +
labs (color = "Monkey" , x= "")
#if you want to see figrue1, just call "figrue1"#
figure1
figure1<- interestingData %>%
ggplot(aes(Subject_ID, Intensity, color= TimePoint)) +
geom_boxplot(size = 6) +
scale_y_log10() +
facet_wrap(~ SeqName) +
theme_bw() +
theme (legend.position = "top") +
labs (color = "Monkey" , x= "")
figure1
figure1<- interestingData %>%
ggplot(aes(Subject_ID, Intensity, color= TimePoint)) +
geom_line(size = 6) +
scale_y_log10() +
facet_wrap(~ SeqName) +
theme_bw() +
theme (legend.position = "top") +
labs (color = "Monkey" , x= "")
figure1
figure1<- interestingData %>%
ggplot(aes(TubeUniqueID, Intensity, color= TimePoint)) +
geom_points(size = 6) +
scale_y_log10() +
facet_wrap(~ SeqName) +
theme_bw() +
theme (legend.position = "top") +
labs (color = "Monkey" , x= "")
figure1<- interestingData %>%
ggplot(aes(TubeUniqueID, Intensity, color= TimePoint)) +
geom_point(size = 6) +
scale_y_log10() +
facet_wrap(~ SeqName) +
theme_bw() +
theme (legend.position = "top") +
labs (color = "Monkey" , x= "")
figure1
figure1<- interestingData %>%
ggplot(aes(TubeUniqueID, Intensity, color= TimePoint)) +
geom_histogram(size = 6) +
scale_y_log10() +
facet_wrap(~ SeqName) +
theme_bw() +
theme (legend.position = "top") +
labs (color = "Monkey" , x= "")
figure1
figure1<- interestingData %>%
ggplot(aes(TubeUniqueID, Intensity, color= TimePoint)) +
geom_boxplot(size = 6) +
scale_y_log10() +
facet_wrap(~ SeqName) +
theme_bw() +
theme (legend.position = "top") +
labs (color = "Monkey" , x= "")
figure1
figure1<- interestingData %>%
ggplot(aes(TimePoint, Intensity, color= Subject_ID)) +
geom_point(size = 6) +
scale_y_log10() +
facet_wrap(~ SeqName) +
theme_bw() +
theme (legend.position = "top") +
labs (color = "Monkey" , x= "")
figure1
figure1<- interestingData %>%
ggplot(aes(TimePoint, Intensity, color= Subject_ID)) +
geom_point(size = 6) +
scale_y_log10() +
facet_wrap(~ SeqName) +
theme_bw() +
theme (legend.position = "top") +
labs (color = "Monkey" , x= "Time Points")
figure1
